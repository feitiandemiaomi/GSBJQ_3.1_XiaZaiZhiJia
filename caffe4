#coding=UTF-8
import numpy as np
import matplotlib.pyplot as plt
#matplotlib inline
import sys,os
import cv2
import pylab
#sys.path.insert(0, '../../python/')

caffe_root = '/home/zs/caffe-yolo/' 

sys.path.insert(0, caffe_root + 'python')
import caffe
caffe.set_device(0)
caffe.set_mode_gpu()
os.chdir(caffe_root)
if not os.path.isfile(caffe_root + 'examples/yolo/models/gnet_yolo_iter_32000.caffemodel'):
    print("caffemodel is not exist...")
net = caffe.Net(caffe_root + 'examples/yolo/gnet_deploy.prototxt',
                caffe_root + 'examples/yolo/models/gnet_yolo_iter_32000.caffemodel',
                caffe.TEST)

net.blobs['data'].data.shape

im = caffe.io.load_image('examples/images/cat.jpg')
print im.shape
b,g,r = cv2.split(im)  
merged = cv2.merge([r,g,b])    
#cv2.imshow("out", merged)
#cv2.waitKey(0)
plt.imshow(im)
plt.axis('off')



# def convert_mean(binMean,npyMean):
#     blob = caffe.proto.caffe_pb2.BlobProto()
#     bin_mean = open(binMean, 'rb' ).read()
#     blob.ParseFromString(bin_mean)
#     arr = np.array( caffe.io.blobproto_to_array(blob) )
#     npy_mean = arr[0]
#     np.save(npyMean, npy_mean )
# binMean=caffe_root+'examples/cifar10/mean.binaryproto'
# npyMean=caffe_root+'examples/cifar10/mean.npy'
# convert_mean(binMean,npyMean)


# transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
# transformer.set_transpose('data', (2,0,1))
# transformer.set_mean('data', np.load(npyMean).mean(1).mean(1)) # 减去均值
# transformer.set_raw_scale('data', 255)  
# transformer.set_channel_swap('data', (2,1,0))
# net.blobs['data'].data[...] = transformer.preprocess('data',im)
# inputData=net.blobs['data'].data


# plt.figure()
# plt.subplot(1,2,1),plt.title("origin")
# plt.imshow(im)
# plt.axis('off')
# plt.subplot(1,2,2),plt.title("subtract mean")
# plt.imshow(transformer.deprocess('data', inputData[0]))
# plt.axis('off')

out = net.forward()
print [(k, v.data.shape) for k, v in net.blobs.items()]
print ("****************************************************")
print [(k, v[0].data.shape) for k, v in net.params.items()]
# 每个可视化的都是在一个由一个个网格组成
def vis_square(data,padsize=1,padval=0):
    data-=data.min()
    data/=data.max()
    
    # force the number of filters to be square
    n=int(np.ceil(np.sqrt(data.shape[0])))
    padding=((0,n**2-data.shape[0]),(0,padsize),(0,padsize))+((0,0),)*(data.ndim-3)
    data=np.pad(data,padding,mode='constant',constant_values=(padval,padval))
    # 对图像使用滤波器
    
    data=data.reshape((n,n)+data.shape[1:]).transpose((0,2,1,3)+tuple(range( 4,data.ndim+1)))
    data=data.reshape((n*data.shape[1],n*data.shape[3])+data.shape[4:])   
    
    #show_image(data)
    plt.imshow(data)
    pylab.show()
   # plt.axis('off') # 不显示坐标轴
    #plt.show()    


def show_data(data, padsize=1, padval=0):
    data -= data.min()
    data /= data.max()
    
    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = ((0, n ** 2 - data.shape[0]), (0, padsize), (0, padsize)) + ((0, 0),) * (data.ndim - 3)
    data = np.pad(data, padding, mode='constant', constant_values=(padval, padval))
    
    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])
    plt.figure()
    #plt.show(data)

    plt.imshow(data,cmap='gray')
    pylab.show()  
    #b,g,r = cv2.split(data)
    #merged = cv2.merge([r,g,b])    
    #cv2.imshow("out", merged)
    #cv2.waitKey(0)
    #
    #plt.axis('off')
    #plt.rcParams['figure.figsize'] = (8, 8)
    #plt.rcParams['image.interpolation'] = 'nearest'
    #plt.rcParams['image.cmap'] = 'gray'

#out = net.forward()
#image=net.blobs['data'].data[4].copy()
#show_image(image.transpose(1,2,0))
#image-=image.min()
#image/=image.max()
#show_image(image.transpose(1,2,0))
#网络提取conv1的卷积核
#filters = net.params['add_conv2'][0].data
#vis_square(filters.transpose(0, 2, 3, 1))
#过滤后的输出,96 张 featuremap
#feat =net.blobs['add_conv2'].data[0,:40]
#vis_square(feat,padval=1)



#show_data(net.blobs['add_conv2'].data[0,:10])
#print net.blobs['add_conv2'].data.shape
#show_data(net.params['add_conv2'][0].data.reshape(1*1024,7,7))
#print net.params['add_conv2'][0].data.shape


# show_data(net.blobs['pool1'].data[0])
# net.blobs['pool1'].data.shape

# show_data(net.blobs['conv2'].data[0],padval=0.5)
# print net.blobs['conv2'].data.shape
# show_data(net.params['conv2'][0].data.reshape(32**2,5,5))
# print net.params['conv2'][0].data.shape



#show_data(net.blobs['conv_reg'].data[0],padval=0.5)
#print net.blobs['conv_reg'].data.shape
show_data(net.params['conv_reg'][0].data.reshape(30*1024,3,3)[:5])
print net.params['conv_reg'][0].data.shape


show_data(net.blobs['pool3'].data[0],padval=0.2)
print net.blobs['pool3'].data.shape


feat = net.blobs['prob'].data[0]
print feat
plt.plot(feat.flat)


